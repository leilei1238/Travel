"use strict";var defaultOptions={componentWillUnmount:!1},pReduce=function(e,n,t){return new Promise(function(r,o){var i=e[Symbol.iterator](),u=0;!function e(t){var c=i.next();c.done?r(t):Promise.all([t,c.value]).then(function(t){e(n(t[0],t[1],u++))}).catch(o)}(t)})},pMapSeries=function(e,n){var t=[];return pReduce(e,function(e,r,o){return Promise.resolve(n(r,o)).then(function(e){t.push(e)})}).then(function(){return t})},ensureChild=function e(n){return n&&"function"==typeof n.render?e(n.render()):n},getChildren=function(e){return e.props&&e.props.children?e.props.children:e.children?e.children:void 0},getType=function(e){return e.type||e.nodeName},getProps=function(e){return e.props||e.attributes},isReactElement=function(e){return!!getType(e)},isClassComponent=function(e){return e.prototype&&(e.prototype.render||e.prototype.isReactComponent||e.prototype.isPureReactComponent)},providesChildContext=function(e){return!!e.getChildContext};function reactTreeWalker(e,n,t){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:defaultOptions;return new Promise(function(o,i){var u=function(){try{return n.apply(void 0,arguments)}catch(e){i(e)}};(function e(n,t){return Array.isArray(n)?Promise.all(n.map(function(n){return e(n,t)})):n?"string"==typeof n||"number"==typeof n?(u(n,null,t),Promise.resolve()):isReactElement(n)?new Promise(function(o){var c=function(t,r,c,s){return Promise.resolve(u(n,r,c,s)).then(function(n){if(!1!==n){var r=t(),u=ensureChild(r);if(u)return Array.isArray(u)?pMapSeries(u,function(n){return n?e(n,s):Promise.resolve()}).then(o,i).catch(i):e(u,s).then(o,i).catch(i)}}).catch(i)};if("function"==typeof getType(n)){var s=getType(n),p=Object.assign({},s.defaultProps,getProps(n),{children:getChildren(n)});if(isClassComponent(s)){var l=new s(p,t);l.props=l.props||p,l.context=l.context||t,l.state=l.state||null,l.setState=function(e){"function"==typeof e&&(e=e(l.state,l.props,l.context)),l.state=Object.assign({},l.state,e)},l.componentWillMount&&l.componentWillMount();var a=providesChildContext(l)?Object.assign({},t,l.getChildContext()):t;c(function(){return l.render(l.props,l.state)},l,t,a).then(function(){r.componentWillUnmount&&l.componentWillUnmount&&l.componentWillUnmount()}).then(o)}else c(function(){return s(p,t)},null,t,t).then(o)}else c(function(){return getChildren(n)},null,t,t).then(o)}):n.containerInfo&&n.children&&n.children.props&&Array.isArray(n.children.props.children)?Promise.all(n.children.props.children.map(function(n){return e(n,t)})):Promise.resolve():Promise.resolve()})(e,t).then(o,i)})}module.exports=reactTreeWalker;
//# sourceMappingURL=react-tree-walker.min.js.map
