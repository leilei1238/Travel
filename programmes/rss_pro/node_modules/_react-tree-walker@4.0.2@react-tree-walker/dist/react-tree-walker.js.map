{"version":3,"file":"react-tree-walker.js","sources":["../src/index.js"],"sourcesContent":["/* eslint-disable no-console */\n\n// Inspired by the awesome work by the Apollo team: 😘\n// https://github.com/apollographql/react-apollo/blob/master/src/getDataFromTree.ts\n//\n// This version has been adapted to be Promise based and support native Preact.\n\nconst defaultOptions = {\n  componentWillUnmount: false,\n}\n\n// Lifted from https://github.com/sindresorhus/p-reduce\n// Thanks @sindresorhus! 🙏\nconst pReduce = (iterable, reducer, initVal) =>\n  new Promise((resolve, reject) => {\n    const iterator = iterable[Symbol.iterator]()\n    let i = 0\n\n    const next = total => {\n      const el = iterator.next()\n\n      if (el.done) {\n        resolve(total)\n        return\n      }\n\n      Promise.all([total, el.value])\n        .then(value => {\n          // eslint-disable-next-line no-plusplus\n          next(reducer(value[0], value[1], i++))\n        })\n        .catch(reject)\n    }\n\n    next(initVal)\n  })\n\n// Lifted from https://github.com/sindresorhus/p-map-series\n// Thanks @sindresorhus! 🙏\nconst pMapSeries = (iterable, iterator) => {\n  const ret = []\n\n  return pReduce(iterable, (a, b, i) =>\n    Promise.resolve(iterator(b, i)).then(val => {\n      ret.push(val)\n    }),\n  ).then(() => ret)\n}\n\nconst ensureChild = child =>\n  child && typeof child.render === 'function'\n    ? ensureChild(child.render())\n    : child\n\n// Preact puts children directly on element, and React via props\nconst getChildren = element =>\n  element.props && element.props.children\n    ? element.props.children\n    : element.children ? element.children : undefined\n\n// Preact uses \"nodeName\", React uses \"type\"\nconst getType = element => element.type || element.nodeName\n\n// Preact uses \"attributes\", React uses \"props\"\nconst getProps = element => element.props || element.attributes\n\nconst isReactElement = element => !!getType(element)\n\nconst isClassComponent = Comp =>\n  Comp.prototype &&\n  (Comp.prototype.render ||\n    Comp.prototype.isReactComponent ||\n    Comp.prototype.isPureReactComponent)\n\nconst providesChildContext = instance => !!instance.getChildContext\n\n// Recurse a React Element tree, running the provided visitor against each element.\n// If a visitor call returns `false` then we will not recurse into the respective\n// elements children.\nexport default function reactTreeWalker(\n  tree,\n  visitor,\n  context,\n  options = defaultOptions,\n) {\n  return new Promise((resolve, reject) => {\n    const safeVisitor = (...args) => {\n      try {\n        return visitor(...args)\n      } catch (err) {\n        reject(err)\n      }\n      return undefined\n    }\n\n    const recursive = (currentElement, currentContext) => {\n      if (Array.isArray(currentElement)) {\n        return Promise.all(\n          currentElement.map(item => recursive(item, currentContext)),\n        )\n      }\n\n      if (!currentElement) {\n        return Promise.resolve()\n      }\n\n      if (\n        typeof currentElement === 'string' ||\n        typeof currentElement === 'number'\n      ) {\n        // Just visit these, they are leaves so we don't keep traversing.\n        safeVisitor(currentElement, null, currentContext)\n        return Promise.resolve()\n      }\n\n      if (isReactElement(currentElement)) {\n        return new Promise(innerResolve => {\n          const visitCurrentElement = (\n            render,\n            compInstance,\n            elContext,\n            childContext,\n          ) =>\n            Promise.resolve(\n              safeVisitor(\n                currentElement,\n                compInstance,\n                elContext,\n                childContext,\n              ),\n            )\n              .then(result => {\n                if (result !== false) {\n                  // A false wasn't returned so we will attempt to visit the children\n                  // for the current element.\n                  const tempChildren = render()\n                  const children = ensureChild(tempChildren)\n                  if (children) {\n                    if (Array.isArray(children)) {\n                      // If its a react Children collection we need to breadth-first\n                      // traverse each of them, and pMapSeries allows us to do a\n                      // depth-first traversal that respects Promises. Thanks @sindresorhus!\n                      return pMapSeries(\n                        children,\n                        child =>\n                          child\n                            ? recursive(child, childContext)\n                            : Promise.resolve(),\n                      )\n                        .then(innerResolve, reject)\n                        .catch(reject)\n                    }\n                    // Otherwise we pass the individual child to the next recursion.\n                    return recursive(children, childContext)\n                      .then(innerResolve, reject)\n                      .catch(reject)\n                  }\n                }\n                return undefined\n              })\n              .catch(reject)\n\n          if (typeof getType(currentElement) === 'function') {\n            const Component = getType(currentElement)\n            const props = Object.assign(\n              {},\n              Component.defaultProps,\n              getProps(currentElement),\n              // For Preact support so that the props get passed into render\n              // function.\n              {\n                children: getChildren(currentElement),\n              },\n            )\n\n            if (isClassComponent(Component)) {\n              // Class component\n              const instance = new Component(props, currentContext)\n\n              // In case the user doesn't pass these to super in the constructor\n              instance.props = instance.props || props\n              instance.context = instance.context || currentContext\n              // set the instance state to null (not undefined) if not set, to match React behaviour\n              instance.state = instance.state || null\n\n              // Make the setState synchronous.\n              instance.setState = newState => {\n                if (typeof newState === 'function') {\n                  // eslint-disable-next-line no-param-reassign\n                  newState = newState(\n                    instance.state,\n                    instance.props,\n                    instance.context,\n                  )\n                }\n                instance.state = Object.assign({}, instance.state, newState)\n              }\n\n              if (instance.componentWillMount) {\n                instance.componentWillMount()\n              }\n\n              const childContext = providesChildContext(instance)\n                ? Object.assign({}, currentContext, instance.getChildContext())\n                : currentContext\n\n              visitCurrentElement(\n                // Note: preact API also allows props and state to be referenced\n                // as arguments to the render func, so we pass them through\n                // here\n                () => instance.render(instance.props, instance.state),\n                instance,\n                currentContext,\n                childContext,\n              )\n                .then(() => {\n                  if (\n                    options.componentWillUnmount &&\n                    instance.componentWillUnmount\n                  ) {\n                    instance.componentWillUnmount()\n                  }\n                })\n                .then(innerResolve)\n            } else {\n              // Stateless Functional Component\n              visitCurrentElement(\n                () => Component(props, currentContext),\n                null,\n                currentContext,\n                currentContext,\n              ).then(innerResolve)\n            }\n          } else {\n            // A basic element, such as a dom node, string, number etc.\n            visitCurrentElement(\n              () => getChildren(currentElement),\n              null,\n              currentContext,\n              currentContext,\n            ).then(innerResolve)\n          }\n        })\n      }\n\n      // Portals\n      if (\n        currentElement.containerInfo &&\n        currentElement.children &&\n        currentElement.children.props &&\n        Array.isArray(currentElement.children.props.children)\n      ) {\n        return Promise.all(\n          currentElement.children.props.children.map(child =>\n            recursive(child, currentContext),\n          ),\n        )\n      }\n\n      return Promise.resolve()\n    }\n\n    recursive(tree, context).then(resolve, reject)\n  })\n}\n"],"names":["defaultOptions","pReduce","iterable","reducer","initVal","Promise","resolve","reject","iterator","Symbol","i","next","el","done","total","all","value","then","catch","pMapSeries","ret","a","b","push","val","ensureChild","child","render","getChildren","element","props","children","undefined","getType","type","nodeName","getProps","attributes","isReactElement","isClassComponent","Comp","prototype","isReactComponent","isPureReactComponent","providesChildContext","instance","getChildContext","reactTreeWalker","tree","visitor","context","options","safeVisitor","err","recursive","currentElement","currentContext","Array","isArray","map","item","visitCurrentElement","compInstance","elContext","childContext","result","tempChildren","innerResolve","Component","Object","assign","defaultProps","state","setState","newState","componentWillMount","componentWillUnmount","containerInfo"],"mappings":"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"}