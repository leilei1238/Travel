{"version":3,"sources":["../src/iterator.js"],"names":["makeInterator","arr","i","length","gen","console","log","next"],"mappings":";;;;;;;;sDAyBWA,a;;AAzBX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAWA,aAAX,CAA0BC,GAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACWC,WADX,GACe,CADf;;AAAA;AAAA,gBACkBA,IAAID,IAAIE,MAD1B;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAEYF,IAAIC,CAAJ,CAFZ;;AAAA;AACkCA,aADlC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,IAAME,MAAMJ,cAAc,CAAC,IAAD,EAAO,IAAP,EAAa,KAAb,CAAd,CAAZ;AACAK,QAAQC,GAAR,CAAY,IAAZ,EAAkBF,IAAIG,IAAJ,EAAlB;AACA;AACA;AACA","file":"iterator.js","sourcesContent":["// function makeIterator (arr) {\n//   let nextIndex = 0\n//   // 返回一个迭代器对象\n//   return {\n//     next: () => {\n//       // next() 方法返回的结果对象\n//       if (nextIndex < arr.length) {\n//         return { value: arr[nextIndex++],done: false} // 当前迭代是否完全迭代结束\n//       }else {\n//         return {\n//           done: true\n//         }\n//       }\n//     }\n//   }\n// }\n// //迭代器总有一个next方法，通过它总能拿到一个对象，这个对象包含两个属性：value:值,done：当前的迭代器是否迭代完成\n// //生成器的本质，就是迭代器\n// const it = makeIterator(['吃饭', '睡觉', '打豆豆'])\n// console.log('首先', it.next().value)\n// console.log('其次', it.next().value)\n// console.log('然后', it.next().value)\n// console.log('最后', it.next().done)\n\n// 生成器：出现目的-简化创建迭代器过程，同时简化逻辑； 通过yield实现类似“断点执行”\nfunction * makeInterator (arr) {\n  for (let i = 0; i < arr.length; i++) {\n      yield arr[i] // yield 就是会把当前循环到的值给迭代下去\n  }\n}\nconst gen = makeInterator(['吃饭', '睡觉', '打豆豆'])\nconsole.log('首先', gen.next())\n// console.log('其次', gen.next().value)\n// console.log('然后', gen.next().value)\n// console.log('最后', gen.next().done)\n"]}